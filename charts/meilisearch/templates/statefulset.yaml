apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "meilisearch.fullname" . }}
  labels:
    {{- include "meilisearch.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "meilisearch.fullname" . }}
  selector:
    matchLabels:
      {{- include "meilisearch.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "meilisearch.labels" . | nindent 8 }}
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "meilisearch.fullname" .) }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: {{ .Values.persistence.volume.name }}
          persistentVolumeClaim:
            claimName: {{ include "meilisearch.fullname" . }}
      {{- end }}
      {{- if .Values.persistence.enabled }}
      initContainers:
        - name: {{ .Chart.Name }}-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}  
          volumeMounts:
            - name: {{ .Values.persistence.volume.name }}
              mountPath: {{ .Values.persistence.volume.mountPath }}
          envFrom:
          {{- if or (eq (include "isProductionWithoutMasterKey" .) "true") .Values.auth.existingMasterKeySecret }}
            - secretRef:
                name: {{ template "secretMasterKeyName" . }}
          {{- end }}
          command: 
            - "/bin/sh"
          args: 
            - '-c'
            - |
              mkdir -p "{{ template "meilisearch.dumpsDir" . }}"
              cd "{{ template "meilisearch.dumpsDir" . }}"
              latest=$(find . -type f | sort | tail -n 1)
              if [ "x$latest" != "x" ]; then
                ln -s -f "$latest" latest.dump
              fi
              if [ -e "{{ .Values.persistence.volume.mountPath }}/data.ms" ]; then
                latest_version="$(cat "{{ .Values.persistence.volume.mountPath }}/data.ms/VERSION")"
                if [ "v$latest_version" != "{{ .Values.image.tag }}" ]; then
                  rm -r "{{ .Values.persistence.volume.mountPath }}/data.ms"
                fi
              fi
              for f in $(find . -type f | sort -r | awk 'NR>2'); do
                rm $f
              done
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: {{ .Values.persistence.volume.name }}
              mountPath: {{ .Values.persistence.volume.mountPath }}
          {{- end }}
          env:
            {{- if .Values.persistence.enabled }}
            - name: MEILI_DUMPS_DIR
              value: "{{ template "meilisearch.dumpsDir" . }}"
            {{ end -}}
            {{- range $key, $value := .Values.environment }}
            - name: {{ $key }}
              value: {{ $value | quote}}
            {{- end }}
          {{- if or (eq (include "isProductionWithoutMasterKey" .) "true") .Values.auth.existingMasterKeySecret }}
          envFrom:
          - secretRef:
              name: {{ template "secretMasterKeyName" . }}
          {{- end }}
          command:
            - "/bin/meilisearch"
          args:
            {{- if .Values.persistence.enabled }}
            - "--import-dump"
            - "{{ template "meilisearch.dumpsDir" . }}/latest.dump"
            - "--ignore-missing-dump"
            - "--ignore-dump-if-db-exists"
            {{- end }}
            {{- with .Values.command -}}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.container.containerPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.livenessProbe.InitialDelaySeconds }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.readinessProbe.InitialDelaySeconds }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
